@using OrderManager.UI.Languages
@using OrderManager.UI.Models
@using OrderManager.UI.Services
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject ICustomerService CustomerService
@inject ITranslateService TranslateService

<MudContainer>
    @if (isLoading)
    {
        <MudProgressCircular Indeterminate="true" data-name="customers-loading-icon"/>
    }
    else
    {
        <MudButton Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="AddNewCustomer" data-name="customers-add-button">Dodaj dane klienta</MudButton>

        <MudGrid>
            <MudItem xs="12" sm="6" md="4">
                <MudTextField @bind-Value="searchQuery" TextChanged="OnSearchCustomer" Immediate="true" Label="Szukaj po imieniu lub nazwisku" Adornment="Adornment.Start" Icon="@Icons.Material.Filled.Search" data-name="customers-search-input" />
            </MudItem>
        </MudGrid>

        <MudTable Items="customersToShow" Striped="true" Hover="true" Bordered="true" data-name="customers-table">
            <HeaderContent>
                <MudTh>Id</MudTh>
                <MudTh>Imię</MudTh>
                <MudTh>Nazwisko</MudTh>
                <MudTh>Email</MudTh>
                <MudTh>Akcje</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd data-name="@($"customers-column-id-{context.Id}")" DataLabel="Id">@context.Id</MudTd>
                <MudTd data-name="@($"customers-column-with-id-{context.Id}-first-name")" DataLabel="FirstName">@context.FirstName</MudTd>
                <MudTd data-name="@($"customers-column-with-id-{context.Id}-last-name")" DataLabel="LastName">@context.LastName</MudTd>
                <MudTd data-name="@($"customers-column-with-id-{context.Id}-email")" DataLabel="Email">@context.Email</MudTd>
                <MudTd>
                    <MudTooltip Text="Edytuj dane kontaktowe" Placement="Placement.Top" data-name="@($"customers-column-edit-with-id-{context.Id}-tooltip")">
                        <MudIconButton data-name="@($"customers-column-edit-with-id-{context.Id}")" OnClick="() => EditCustomer(context.Id)" Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" />
                    </MudTooltip>
                    <MudTooltip Text="Usuń dane kontaktowe" Placement="Placement.Top" data-name="@($"customers-column-delete-with-id-{context.Id}-tooltip")">
                        <MudIconButton data-name="@($"customers-column-delete-with-id-{context.Id}")" OnClick="() => DeleteCustomer(context.Id)" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" />
                    </MudTooltip>
                </MudTd>
            </RowTemplate>
        </MudTable>
    }
</MudContainer>

@code {
    private List<CustomerDTO> customers = new();
    private List<CustomerDTO> customersToShow = new();
    private CustomerDTO customer = new();
    private bool isLoading = true;
    private bool isAdding = false;
    private bool isEditing = false;
    private string searchQuery = string.Empty;
    private readonly DialogOptions _customerFormModalOptions = new DialogOptions
    {
        MaxWidth = MaxWidth.Medium,
        FullWidth = true,
        BackdropClick = false,
        CloseOnEscapeKey = false,
        Position = DialogPosition.Center
    };
    private readonly DialogOptions _deleteModalOptions = new DialogOptions
    {
        BackdropClick = false,
        CloseOnEscapeKey = true,
        Position = DialogPosition.Center
    };
    private readonly MessageBoxOptions _deleteModalContent = new MessageBoxOptions
    {
        Title = "Usuń dane klienta",
        Message = "Czy chcesz usunąć dane klienta?",
        YesText = "Tak",
        NoText = "Nie"
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomers();
    }

    private void OnSearchCustomer(string term)
    {
        customersToShow = customers
            .Where(c => c.FirstName.Contains(term, StringComparison.OrdinalIgnoreCase)
                        || c.LastName.Contains(term, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private async Task RefreshCustomers()
    {
        await LoadCustomers();
        OnSearchCustomer(searchQuery);
    }

    private async Task AddNewCustomer()
    {
        var dialogReference = await DialogService.ShowAsync<CustomerFormComponent>("Dodaj dane klienta", _customerFormModalOptions);
        var result = await dialogReference.Result;

        if (result is null || result.Canceled)
        {
            return;
        }

        var dto = result.Data as CustomerDTO;
        if (dto is null)
        {
            return;
        }

        await SaveCustomer(dto);
        await RefreshCustomers();
    }

    private async Task EditCustomer(int id)
    {
        var customer = await LoadCustomer(id);
        if (customer is null)
        {
            return;
        }

        var dialogReference = await DialogService.ShowAsync<CustomerFormComponent>("Edytuj dane klienta", new DialogParameters
        {
            { "Customer", customer },
            { "Title", "Edytuj dane klienta" }
        }, _customerFormModalOptions);
        var result = await dialogReference.Result;

        if (result is null || result.Canceled)
        {
            return;
        }

        var dto = result.Data as CustomerDTO;
        if (dto is null)
        {
            return;
        }

        await UpdateCustomer(dto);
        await RefreshCustomers();
    }

    private async Task SaveCustomer(CustomerDTO newCustomer)
    {
        try
        {
            var result = await CustomerService.Add(newCustomer);
            if (!result.Valid)
            {
                if (result.ErrorMessage is not null)
                {
                    Snackbar.Add(TranslateService.Translate(result.ErrorMessage), Severity.Error);
                }

                return;
            }

            Snackbar.Add("Pomyślnie dodano dane klienta", Severity.Success);
        }
        catch
        {
            Snackbar.Add("Wystąpił błąd podczas dodawnia danych klienta. Prosimy spróbować ponownie później", Severity.Error);
        }
    }

    private async Task UpdateCustomer(CustomerDTO customer)
    {
        try
        {
            var result = await CustomerService.Update(customer);
            if (!result.Valid)
            {
                if (result.ErrorMessage is not null)
                {
                    Snackbar.Add(TranslateService.Translate(result.ErrorMessage), Severity.Error);
                }

                return;
            }

            Snackbar.Add("Pomyślnie zaaktualizowano dane klienta", Severity.Success);
        }
        catch
        {
            Snackbar.Add("Wystąpił błąd podczas aktualizacji danych klienta. Prosimy spróbować ponownie później", Severity.Error);
        }
    }

    private async Task DeleteCustomer(int id)
    {
        var messageBoxValue = await DialogService.ShowMessageBox(_deleteModalContent, _deleteModalOptions);
        if (!messageBoxValue.HasValue || !messageBoxValue.Value)
        {
            return;
        }

        var result = await CustomerService.Delete(id);
        if (!result.Valid)
        {
            if (result.ErrorMessage is not null)
            {
                Snackbar.Add(TranslateService.Translate(result.ErrorMessage), Severity.Error);
            }

            return;
        }

        Snackbar.Add("Pomyślnie usunięto dane klienta!", Severity.Success);
        await RefreshCustomers();
    }

    private async Task LoadCustomers()
    {
        try
        {
            isLoading = true;
            var result = await CustomerService.GetAll();
            if (!result.Valid)
            {
                if (result.ErrorMessage is not null)
                {
                    Snackbar.Add(TranslateService.Translate(result.ErrorMessage), Severity.Error);
                }

                return;
            }

            customers = result.Data ?? [];
            customersToShow = customers;
        }
        catch
        {
            Snackbar.Add("Wystąpił błąd podczas pobierania danych klientów. Prosimy spróbować ponownie później", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task<CustomerDTO?> LoadCustomer(int id)
    {
        try
        {
            var result = await CustomerService.GetById(id);
            if (!result.Valid)
            {
                if (result.ErrorMessage is not null)
                {
                    Snackbar.Add(TranslateService.Translate(result.ErrorMessage), Severity.Error);
                }

                return null;
            }

            return result.Data;
        }
        catch
        {
            Snackbar.Add($"Wystąpił błąd podczas pobierania danych klienta Id {id}. Prosimy spróbować ponownie później", Severity.Error);
            return null;
        }
    }
}

